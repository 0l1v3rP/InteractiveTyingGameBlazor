@rendermode InteractiveServer
@page "/"
@using SubtitlesParser.Classes.Parsers;
@using SubtitlesParser.Classes
@using InteractiveTyingGameBlazor.Components.Pages.Modals;
@using System.Timers;
@using InteractiveTyingGameBlazor.Models;
@using System.Security.Claims;
@using InteractiveTyingGameBlazor.Data.Services;
@using YoutubeExplode;
@using YoutubeExplode.Videos.ClosedCaptions;
@using Syncfusion.Blazor.Spinner;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;
@using InteractiveTyingGameBlazor.DbModels;
@using InteractiveTyingGameBlazor.GameManagement;
@using Microsoft.AspNetCore.Authorization;

@inject TypingResultService _result;
@inject RegisteredVideosService _video;
@inject IJSRuntime JSRuntime
@inject MatchmakingService _matchmaking;
@inject NavigationManager _navigation;
@inherits Common;
@implements IDisposable
<script src="js/typingGame.js"></script>

<div class="game-container" style="@(EnablePointerEvents(spinnerVisiblity))">
    <div id="video-container">
        @if (playTextVisible)
        {
            <figure>
                <video id="my-video" class="video-js" controls preload="auto" width="860" height="355"></video>
                <figcaption class="fig-caption">PLAY!</figcaption>
            </figure>
        }
        else
        {
            <video id="my-video" class="video-js" controls preload="auto" width="860" height="355"></video>
        }
    </div>
    <div class="stats-container">
        @{
            string playerLabels = string.Empty;
            string cpmValues = string.Empty;
            string accuracyValues = string.Empty;
            if (Session is not null)
            {
                string dataCss = "display:inline-block;width:200px;text-align:left;white-space:nowrap;";
                foreach (KeyValuePair<string, Models.Game> entry in Session.PlayerGameStates)
                {
                    string player = entry.Key;
                    Models.Game game = entry.Value;

                    playerLabels += $"<span style={dataCss}>{(player == userID ? "ME" : "OTHER")}</span>";
                    cpmValues += $"<span style={dataCss}>CPM: {game.CPM}</span>";
                    accuracyValues += $"<span style={dataCss}>Accuracy: {game.Accuracy}%</span>";
                }
            }
        }

        <div class="stats-item">
            <span class="player-color">@((MarkupString)playerLabels)</span>
        </div>
        <div class="stats-item">
            <span class="cpm-color">@((MarkupString)cpmValues)</span>
        </div>
        <div class="stats-item">
            <span class="accuracy-color">@((MarkupString)accuracyValues)</span>
        </div>
        <div class="stats-item">
            Time: <span id="time" class="time-color">@time</span>
        </div>
    </div>
    <div id="textInputWrapper" style="display:flex">
        <div id="leftTypingDisplay" class="leftText typingInput">

        </div>
        <input class="rightTextInput typingInput" type="text" id="rightTypingInput" autocomplete="off">
    </div>
</div>
<GameModal></GameModal>
<SfSpinner @bind-Visible="@spinnerVisiblity" />

<GameModal IsOpen="@IsVideoModalOpen" ConfigureOptions="@ConfigureGame" UserId="@userID"/>
<ResultModal IsOpen="@IsResultModalOpen" NewGame="@NewGame" OnClose="@ResultClose"
             Accuracy="GetAccuracy()" CPM="GetCPM()" Placement="GetPlacement()" /> @* Restart="@Restart"  *@

@code {
    // private bool canPlay = false;
    public GameSession? Session { get; set; } = null;
    private bool spinnerVisiblity = false; 
    private Timer? timer = null;
    private int seconds = 0;
    private string time = "00:00";
    private int? currentIndex = null;
    private IList<TypedChar>? Chars = null;
    private GameConfig config;
    public bool IsVideoModalOpen { get; set; } = false;
    public bool IsResultModalOpen { get; set; } = false;
    public bool playTextVisible = true;

    public int GetCPM() => Session?.PlayerGameStates[userID].CPM ?? 0;

    public float GetAccuracy() => Session?.PlayerGameStates[userID].Accuracy ?? 0;

    public int GetPlacement() => Session?.PlayerGameStates[userID].Placement ?? 0;

    private string EnablePointerEvents(bool enable) 
        => enable  ? "pointer-events: none;" : "pointer-events: auto;";

    private async Task ResultClose()
    {
        IsResultModalOpen = false;
        await SetDefault();
    }
    // private async Task Restart()
    // {
    //     await InitGame();
    //     await ResultClose();
    // }

    private async Task NewGame()
    {
        _matchmaking.UnregisterFromSession(userID);
        Session = null;
        IsVideoModalOpen = true;
        await ResultClose();
    }

    private void AfterSubmit()
    {
        TypingResult result = new()
        {
            CPM = Session.PlayerGameStates[userID].CPM,
            Accuracy = Session.PlayerGameStates[userID].Accuracy,
            Date = DateTime.UtcNow,
            VideoId = config.VideoId,
            UserId = userID.StartsWith("Anonymous") ? null : userID,
            Chars = JsonSerializer.Serialize(Chars)
        };
        _result.Add(result);
    }

    private async Task SetDefault()
    {
        time = "00:00";
        seconds = config.Time * 60;
        currentIndex = null;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ConfigureGame()
    {
        playTextVisible = false;
        IsVideoModalOpen = false;
        Session = _matchmaking.GetSession(userID);
        config = Session.Config;
        await InitGame();
        await SetDefault();
    }

    private async Task InitGame()
    {
        await JSRuntime.InvokeVoidAsync("updateVideoSource", config.URL, config.Time);
        Session.Started = true;
        Chars = new List<TypedChar>();
        _video.IncreaseCounter(config.VideoId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender) {
            var dotNetRef = DotNetObjectReference.Create(this);
            for (int i = 0; i < 5; i++)
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("initVideoPlayer", "my-video", dotNetRef);
                    break;
                }
                catch
                {
                    await Task.Delay(500);
                }
            }
            await JSRuntime.InvokeVoidAsync("disposeInterop", dotNetRef);
        }
    }

    private int? FindInitialIndex(TimeSpan currentTimeSpan)
    {
        for (int i = config.Captions.Captions.Count - 1; i >= 0; i--)
        {
            var caption = config.Captions.Captions[i];
            if (caption.Offset <= currentTimeSpan)
            {
                return i + 1;
            }
        }
        return null;
    }

    private async void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        seconds--;
        time = $"{(seconds / 60).ToString("D2")}:{(seconds % 60).ToString("D2")}";

        if (seconds == 0)
        {
            await EndGame();
        }
        await InvokeAsync(StateHasChanged);
    }

    #region jsInvokable
    [JSInvokable]
    public async Task OpenConfiguration()
    {
        IsVideoModalOpen = true;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task SetCPM(int cpm)
    {
        Session.PlayerGameStates[userID].CPM = cpm;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public async Task SetAccuracy(float accuracy)
    {
        Session.PlayerGameStates[userID].Accuracy = accuracy;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public bool UpdateSubtitles(decimal currentTime)
    {      
        TimeSpan currentTimeSpan = TimeSpan.FromSeconds((double)currentTime);

        if (currentIndex is null)
        {
            currentIndex = FindInitialIndex(currentTimeSpan);
            return currentIndex.HasValue;
        }
        else
        {
            ClosedCaption currentCaption = config.Captions.Captions[currentIndex.Value];
            if (currentTimeSpan > (currentCaption.Offset + currentCaption.Duration))
            {
                currentIndex++;
                if (currentIndex >= config.Captions.Captions.Count)
                {
                    currentIndex = null; 
                }
                return true;
            }
        }

        return false;
    }

    [JSInvokable]
    public ClosedCaption GetCurrentSubtitle()
        => config.Captions.Captions[currentIndex.Value];

    [JSInvokable]
    public async Task EndGame()
    {
        timer.Stop();
        timer.Elapsed -= OnTimedEvent;
        timer.Dispose();
        timer = null;
        // canPlay = false;
        playTextVisible = true;
                await JSRuntime.InvokeVoidAsync("endGame");
        AfterSubmit();
        Session.OnMatchFinished += async () =>
        {
            IsResultModalOpen = true;
            await InvokeAsync(StateHasChanged);
        };
        Session.PlayerFinished(userID);
    }

    [JSInvokable]
    public async Task StartGame()
    {
        timer = new Timer(1000);
        timer.Elapsed +=  OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
        time = "00:00";
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void CharPressed(char character, bool isCorrect) 
        => Chars.Add(new(seconds, character, isCorrect));

    [JSInvokable]
    public void DisposeComponent()
    {
        if (timer is not null)
        {
            timer.Elapsed -= OnTimedEvent;
            timer.Dispose();
            timer = null;
        }
        _matchmaking.UnregisterFromSession(userID);
    }

    [JSInvokable]
    public async Task SpinnerVisibility(bool value)
    {
        spinnerVisiblity = value;
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void PlayerReady()
        => Session.SetPlayerReady(userID, true);

    [JSInvokable]
    public bool MatchReady()
        => Session.MatchReady();

    [JSInvokable]
    public double GetSeedValue()
        => Session.Seed;
    #endregion

    public void Dispose()
    {
        DisposeComponent();
    }
}