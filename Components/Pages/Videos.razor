@rendermode InteractiveServer
@page "/Videos"
@	using InteractiveTyingGameBlazor.Components.Pages.Modals
@	using Syncfusion.Blazor.Grids;
@	using Syncfusion.Blazor.DropDowns;
@	using Syncfusion.Blazor.Buttons;
@	using InteractiveTyingGameBlazor.Models;
@	using InteractiveTyingGameBlazor.Utils;
@	using InteractiveTyingGameBlazor.Models;
@	using System.Collections.ObjectModel;
@	using InteractiveTyingGameBlazor.Data.Services;
@	using Microsoft.AspNetCore.Authorization;
@	using Syncfusion.Blazor.Navigations;

@	using InteractiveTyingGameBlazor.Components.Pages.Charts;
	using InteractiveTyingGameBlazor.DbModels;
@inject RegisteredVideosService _data;
@inject IJSRuntime JSRuntime
@inherits Common;
@attribute [Authorize]
<script src="js/videos.js"></script>
<SfGrid DataSource="@myVideos" Toolbar="@toolbarItems">
	<GridEditSettings  AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
    <GridEvents RowDeselected="@OnRowDeselected" RowSelected="@OnRowSelected" OnToolbarClick="@OnToolbarClick" OnActionComplete="@ActionCompleteHandler" OnActionBegin="@ActionBeginHandler" TValue="@RegisteredVideo"></GridEvents>
	<GridColumns>
		<GridColumn Field=@nameof(RegisteredVideo.Id) IsPrimaryKey="true" TextAlign="TextAlign.Center"  Visible="false"></GridColumn>
        <GridColumn Field=@nameof(RegisteredVideo.Title) HeaderText="Name" TextAlign="TextAlign.Center" ValidationRules="@Required"></GridColumn>
        <GridColumn Field=@nameof(RegisteredVideo.URL) HeaderText="Url" TextAlign="TextAlign.Center" ValidationRules="@UrlValidation"></GridColumn>
        <GridColumn Field=@nameof(RegisteredVideo.Language) HeaderText="Language" TextAlign="TextAlign.Center" 
        ValidationRules="@Required" AllowEditing="true" EditType="EditType.DropDownEdit">
            <EditTemplate Context="context">
                <SfComboBox TItem="string" TValue="string" DataSource="@currentLanguageOptions"
                            Placeholder="Select a language"
                            Value="@((context as RegisteredVideo).Language)"
                            ValueChanged="@(value => (context as RegisteredVideo).Language = value)" 
                            AllowCustom="false">
                            <ComboBoxEvents TItem="string" TValue="string"  OnOpen="@(async () => await UpdateLanguageOptions((context as RegisteredVideo).URL))">
                            </ComboBoxEvents>
                </SfComboBox>
            </EditTemplate>
        </GridColumn>

        <GridColumn Field=@nameof(RegisteredVideo.Category) TextAlign="TextAlign.Center"  ValidationRules="@Required" HeaderText="Category" EditType="EditType.DropDownEdit">
            <EditTemplate Context="context">
                <SfComboBox TItem="string" TValue="string" DataSource="@categoryOptions"
                            Value="@GetCategoryString(context as RegisteredVideo)"
                            ValueChanged="@(val => SetCategoryFromString(context as RegisteredVideo, val))"
                            Placeholder="Select a Category" AllowCustom="false">
                </SfComboBox>
            </EditTemplate>
        </GridColumn>
        <GridColumn HeaderText="Global" TextAlign="TextAlign.Center" Type="ColumnType.Boolean">
            <Template Context="context">
                <SfCheckBox Checked="@((context as RegisteredVideo).IsGlobal)" Disabled=true></SfCheckBox>
            </Template>
            <EditTemplate Context="context">
                <SfCheckBox @bind-Checked="@((context as RegisteredVideo).IsGlobal)"></SfCheckBox>
            </EditTemplate>
        </GridColumn>
	</GridColumns>
</SfGrid>

@if(showPreview)
{
    <GenericModal IsOpen="true" Title="Number of characters throughout video" Large="true">
        <CharacterFrequencyChart SelectedVideo="SelectedVideo"></CharacterFrequencyChart>
    </GenericModal>
}

@code {
    private List<string> categoryOptions = Enum.GetNames(typeof(CategoryType)).ToList();
    private string? currentVideoUrl = null;
    private bool showPreview = false;

    public RegisteredVideo? SelectedVideo { get; set; } = null;

    public ObservableCollection<string> currentLanguageOptions = new();

    private async Task OnRowSelected(RowSelectEventArgs<RegisteredVideo> args)
    {
        SelectedVideo = args.Data;
        await JSRuntime.InvokeVoidAsync("previewIsAccessible", true);
    }

    private async Task OnRowDeselected(RowDeselectEventArgs<RegisteredVideo> args)
    {
        SelectedVideo = null;
        showPreview = false;
        await JSRuntime.InvokeVoidAsync("previewIsAccessible", false);
    }

    private async Task UpdateLanguageOptions(string videoUrl)
    {
        if (!string.IsNullOrEmpty(videoUrl) && currentVideoUrl != videoUrl)
        {
            currentVideoUrl = videoUrl;
            var newOptions = (await YTMetadataExtract.
                GetTranscripts(videoUrl)).
                    Select(i => i.Name).Order();

            currentLanguageOptions.Clear();

            foreach (var option in newOptions)
                currentLanguageOptions.Add(option);

            await InvokeAsync(StateHasChanged);
        }

        if (string.IsNullOrEmpty(videoUrl))
            currentLanguageOptions.Clear();
    }
    private string GetCategoryString(RegisteredVideo video)
         => video?.Category.ToString();

    private void SetCategoryFromString(RegisteredVideo video, string value)
    {
        if (video != null && Enum.TryParse<CategoryType>(value, out var category))
            video.Category = category;
    }

    ValidationRules Required = new()
        {
            Required = true
        };

    ValidationRules UrlValidation = new()
        {
            Required = true,
            RegexPattern = @"^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$",
        };

    private List<RegisteredVideo> myVideos = new();

    private List<Object> toolbarItems;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        myVideos = (await _data.GetUserVideos()).ToList();
        toolbarItems = new(){ "Add", "Edit", "Delete", "Update", "Cancel",
        new ItemModel() { Text = "Preview", PrefixIcon = "bi-graph-up", Id = "Preview", CssClass="e-overlay"} };
    }

    public void OnToolbarClick(ClickEventArgs Args)
    {
        if(Args.Item.Text == "Preview")
        {
            showPreview = !showPreview;
            StateHasChanged();
        }
    }

    public void ActionBeginHandler(ActionEventArgs<RegisteredVideo> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            Args.Data.UserId = userID;
            if (Args.Action == "Add")
                _data.Add(Args.Data);
            else
                _data.Update(Args.Data);
        }
        else if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            _data.Delete(Args.Data);
    }

    public async Task ActionCompleteHandler(ActionEventArgs<RegisteredVideo> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            myVideos = (await _data.GetUserVideos()).ToList();
    }
}