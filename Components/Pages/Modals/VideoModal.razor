@using InteractiveTyingGameBlazor.Data.Services;
@using InteractiveTyingGameBlazor.DbModels;
@using InteractiveTyingGameBlazor.Models;
@using Microsoft.AspNetCore.SignalR.Client;
@using YoutubeExplode;
@using YoutubeExplode.Videos.ClosedCaptions;
@using InteractiveTyingGameBlazor.Utils;
@using InteractiveTyingGameBlazor.MatchMaking;

@inject MatchmakingService _matchMaking;
@inject RegisteredVideosService _videos;
@inject NavigationManager _navigation;
@inject MatchmakingMediator _mediator

<GenericModal IsOpen="@IsOpen" Title="Select Video & Time">
    <div class="row mb-3 mx-3">
        <h6>Choose Category:</h6>
        <select class="form-select" @onchange="UpdateSelectedCategory">
            <option value=""></option>
            @foreach (var category in categoriesList)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>
    <div class="row  mb-3 mx-3">
        <h6>Choose Video:</h6>
        <select class="form-select" @onchange="UpdateSelectedVideo">
            <option value=""></option>
            @foreach (var video in filteredVideosList)
            {
                <option value="@video.Id">@video.Title</option>
            }
        </select>
    </div>

    <div class="row mb-3 mx-3">
        <h6>Choose Time:</h6>
        <select class="form-select" @onchange="UpdateSelectedTime">
            @foreach (var timeOption in TimeOptions)
            {
                <option value="@timeOption.Item2">
                    @timeOption.Item1
                </option>
            }
        </select>
    </div>
    @if (UserId is not null)
    {
        <div>
            <button class="btn btn-success mb-3 mx-3" @onclick="FindOpponent">Find Opponent</button>
        </div>
    }
    @if (isSearching)
    {
        <p>Searching for an opponent...</p>
    }
    @if (showAlert)
    {
    <div class="alert alert-danger mb-3 mx-3">
            Select Category & Video.
        </div>
    }
    <button class="btn btn-primary mx-3" @onclick="OnSubmitSelection">Submit</button>
</GenericModal>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<GameConfig> ConfigureOptions { get; set; }

    [Parameter]
    public string? UserId { get; set; }

    private Random random = new Random();
    private List<RegisteredVideo> videosList = new List<RegisteredVideo>();
    private bool showAlert;
    private List<(string, int?)> TimeOptions = new List<(string, int?)>
    {
        ("1 minute", 1),
        ("2 minutes", 2),
        ("5 minutes", 5),
        ("Random", null),
    };
    private RegisteredVideo? selectedVideo;
    private string selectedTime;
    private List<RegisteredVideo> filteredVideosList = new();
    private string selectedCategory;
    private string[] categoriesList = Enum.GetNames(typeof(CategoryType));

    private bool isSearching = false;

    public async Task FindOpponent()
    {
        isSearching = true;
        bool success = _matchMaking.AddPlayerToQueue(UserId);
        if (success)
        {
            _mediator.Subscribe(UserId, UpdateUIOnMatchFound);
            await _matchMaking.TryMatchPlayers();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        selectedTime = TimeOptions.First().Item1;
        videosList = (await _videos.GetAvailableVideos()).ToList();
    }

    private async Task UpdateUIOnMatchFound()
    {
        isSearching = false;
        await OnSubmitSelection();
    }

    private async Task UpdateSelectedVideo(ChangeEventArgs e)
    {
        var selectedVideoId = e.Value?.ToString();
        selectedVideo = filteredVideosList.FirstOrDefault(v => v.Id.ToString().Equals(selectedVideoId));
        await ErrorHandle(false);
    }

    private async Task ErrorHandle(bool showErr)
    {
        if (!showErr && !string.IsNullOrEmpty(selectedCategory) && selectedVideo is not null)
        {
            showAlert = false;
            await InvokeAsync(StateHasChanged);
        }
        else if (showErr && (string.IsNullOrEmpty(selectedCategory) || selectedVideo is null))
        {
            showAlert = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UpdateSelectedCategory(ChangeEventArgs e)
    {
        selectedCategory = e.Value.ToString();
        filteredVideosList = videosList.Where(v => v.Category.ToString() == selectedCategory).ToList();
        await ErrorHandle(false);
    }

    private void UpdateSelectedTime(ChangeEventArgs e)
        => selectedTime = e.Value?.ToString();

    public async Task OnSubmitSelection()
    {
        await ErrorHandle(true);
        if (!showAlert)
        {
            var option = TimeOptions.FirstOrDefault(i => i.Item1?.ToString() == selectedTime).Item2;
            int time = option is null ? random.Next(1, 5) : option.Value;
            var captions = await YTMetadataExtract.GetSubtitles(selectedVideo.URL, selectedVideo.Language);
            _matchMaking.TryCreateSession(UserId); // Creates session if it does not already exists
            await InvokeAsync(async () => await ConfigureOptions.InvokeAsync(new GameConfig(selectedVideo.URL, time, captions)));
        }
    }
    
    protected override void OnParametersSet()
        => StateHasChanged();

    public void Dispose()
    {
        if(UserId is not null)
            _mediator.Unsubscribe(UserId);
    }
}