@rendermode InteractiveServer
@using InteractiveTyingGameBlazor.Models;
@using InteractiveTyingGameBlazor.Chat;
@inject PublicChatService _chatService;
@inject IJSRuntime JSRuntime;
@inherits Common;
@implements IDisposable
<script src="js/chatComponent.js"></script>

<div class="chat-container">
    <div id="chatMessages" class="chat-messages chat-component" @ref="chatMessagesContainer" @onchange="@ScrollToBottom">
    @foreach(var message in messages)
    {
        <div style="color: @message.Color">
            @message.ToString()
        </div>
    }
    </div>
    <input class="chat-input chat-component" type="text" @bind="@textMessage" @onkeyup="@HandleKeyUp" placeholder="Type your message here..." />
</div>

@code {
    private List<PublicMessage> messages = [];
    private string textMessage = string.Empty;
    private ElementReference chatMessagesContainer;
    private Random random = new Random();
    private bool shouldScroll = false;
    private async Task HandleKeyUp(KeyboardEventArgs e) 
    {
        if (e.Key == "Enter" && textMessage != string.Empty)
        {
            await SendMessage();
        }
    }

    private string GetRandomColor()
        => $"#{random.Next(0x1000000):X6}";

    private async Task SendMessage()
    {
        var message = new PublicMessage(textMessage, userName, GetRandomColor());
        _chatService.AddMessage(message);
        textMessage = string.Empty;
        await _chatService.UpdateChatAsync();
    }

    private async Task Update()
    {
        messages = _chatService.Messages;
        await InvokeAsync(StateHasChanged);
        shouldScroll = true;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _chatService.UpdateAsync += Update;
        messages = _chatService.Messages;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("disposeInterop", dotNetRef);
        }
        if (shouldScroll)
        {
            await ScrollToBottom();
            shouldScroll = false;
        }
    }
    // [JSInvokable]
    // public void DisposeComponent()
    //     => _chatService.UpdateAsync -= Update;

    public void Dispose()
        => _chatService.UpdateAsync -= Update;

    private async Task ScrollToBottom()
        => await JSRuntime.InvokeVoidAsync("scrollToBottom");
}